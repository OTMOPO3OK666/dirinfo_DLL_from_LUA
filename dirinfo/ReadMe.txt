========================================================================
    Создание своей DLL для LUA - что бы в скрипте lua подключить dll и вызвать свою функцию
========================================================================

Пример для Visual Studio Community 2015, Windows 7 последний пакет, Lua5.1

Создаем новый проект, выбираем :
Файл - Создать - Проект
Выбираем шаблон:
Visual C++ - Win32 - Проект Win32 - Вводим название проекта "myluadll" - Нажимаем "Ок".
Внимание! Если такого шаблона нет, нам будет предложено закачать, закачиваем и продолжаем:
Открывается окно, нажимаем далее, перед нами открывается форма "Параметры приложения":
Выбираем тип приложения: "Библиотека DLL", жмем "Готово".

Теперь можно даже попытать собрать его, все должно работать: Сборка - Собрать решение (ctrl+shift+B).
После чего в папке с проектом мы сможем найти нашу dll.

Но это пока пустышка, продолжаем...

Теперь в папку с нашим проектом, из дистрибутива lua http://sourceforge.net/projects/luabinaries/files/, нужно скопировать следующие файлы:
- lua.h
- lauxlib.h
- luaconf.h
- lua5.1.lib
В папке нашего проекта, мы его назвали myluadll, лежит папка с тем же именем myluadll, в неё и копируем (там лежат .cpp и .h файлы).

Файл lua5.1.lib необходимо подключить к решению, иначе будет ошибка при сборке.
В обозревателе решений щелкаем правой по решению: Добавить - Существующий элемент - Выбираем lua5.1.lib (лежит внутри нашего проекта)
или через настройки:
Проект - Свойства - Компоновщик - Ввод - Дополнительные зависимости - меняем эту строку добавив в неё "lua5.1.lib"

Открываем файл dllmain.cpp
И полностью заменяем его содержимое кодом приведенным далее.

// dllmain.cpp: определяет точку входа для приложения DLL.
#include "stdafx.h"

#define LUA_LIB
#define LUA_BUILD_AS_DLL

//Заголовочные файлы LUA из дистрибутива LUA
extern "C" {
#include "./lauxlib.h"
#include "./lua.h"
}

//Стандартная точка входа для DLL.
BOOL APIENTRY DllMain(HANDLE hModule,
  DWORD  ul_reason_for_call,
  LPVOID lpReserved
  )
{
  return TRUE;
}

//Наша функция которую мы запустим из lua, перемножает два числа.
static int MyLuaDllFunction(lua_State *L)
{
  //Получаем первый и второй параметры вызова функции из стека с проверкой каждого на число
  double x = luaL_checknumber(L, 1);
  double y = luaL_checknumber(L, 2);
  lua_pushnumber(L, x*y);//Возвращаемое значение
  return (1);//Даем lua знать, количество значений возвращаемое данной функцией
}

//Регистрация реализованных в dll функций, что бы те стали доступны из lua.
static struct luaL_reg ls_lib[] = {
  { "MyLuaDllFunction", MyLuaDllFunction },
  { NULL, NULL }
};
//Эту функцию lua будет искать при подключении dll, её название заканчиваться названием dll, luaopen_ИМЯВАШЕЙDLL
extern "C" LUALIB_API int luaopen_myluadll(lua_State *L) {
  luaL_openlib(L, "myluadll", ls_lib, 0);
  return 0;
}

Когда будете писать свою dll не забудьте переделать функцию luaopen_myluadll, в соответствии с названием вашей dll.

После чего выполняем сборку, в режиме Release, что бы получить конечный рабочий dll файл.

Вытаскиваем наш dll, кидаем в папку с lua так что бы подцепил.
И запускаем следующий скрипт:

require("myluadll")

result = myluadll.MyLuaDllFunction(7, 5)

print(result)

Результат:

35
/////////////////////////////////////////////////////////////////////////////

Коннектор DLL QUIK - QLua(Lua) - C++
https://quikluacsharp.ru/qlua-c-cpp-csharp/vzaimodejstvie-lua-i-biblioteki-dll-napisannoj-na-c-c/

/////////////////////////////////////////////////////////////////////////////

Взаимодействие Lua и библиотеки DLL, написанной на C/C++
https://quikluacsharp.ru/qlua-c-cpp-csharp/vzaimodejstvie-lua-i-biblioteki-dll-napisannoj-na-c-c/

/////////////////////////////////////////////////////////////////////////////

Настройка в Visual Studio
http://robostroy.ru/community/article.aspx?id=792

/////////////////////////////////////////////////////////////////////////////